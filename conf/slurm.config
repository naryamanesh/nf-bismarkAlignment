/*
SLURM configuration file. Resource specifications for SLURM cluster
*/

// Trance file column order - leave as is
trace.fields = 'process,task_id,hash,name,native_id,attempt,status,exit,realtime,cpus,memory,%cpu,vmem,rss,submit,start,complete,duration,realtime,rchar,wchar'

// Defining slurm EXECUTOR
executor {
    name = 'slurm'
    jobName = { "$task.hash" }
    queueSize = 6 // No more than 6 jobs submitted at a time - change to a reasonable value
}

// Process resources
process {

    // General process (task) parameters
    queue = 'sahmri_cancer_hpc'
    cpus = { check_max( 6 * task.attempt, 'cpus' ) }
    memory = { check_max( 95.GB * task.attempt, 'memory' ) }
    time = { check_max( 120.h * task.attempt, 'time' ) }
    clusterOptions = "--mail-user=$params.userEmail --mail-type=ALL"

    // Error strategy for failing tasks
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 6  // Number of times a task can fail
    maxErrors = '-1' // Turn off maxErrors

    // Use the withName argument to provide process specific resources
    withName:runTrimgalore {
        cpus = { check_max(6, 'cpus')}
        memory = { check_max( 95.GB * task.attempt, 'memory' ) }
        time = { check_max( 96.h * task.attempt, 'time' ) }
    }

    withName:runBismarkPE {
      cpus = { check_max(6, 'cpus')}
      memory = { check_max( 95.GB * task.attempt, 'memory' ) }
      time = { check_max( 120.h * task.attempt, 'time' ) }
    }

    withName:runBismarkR1 {
      cpus = { check_max(6, 'cpus')}
      memory = { check_max( 95.GB * task.attempt, 'memory' ) }
      time = { check_max( 120.h * task.attempt, 'time' ) }
    }

    withName:runBismarkR2 {
      cpus = { check_max(6, 'cpus')}
      memory = { check_max( 95.GB * task.attempt, 'memory' ) }
      time = { check_max( 120.h * task.attempt, 'time' ) }
    }

    withName:runBismark_extractor {
      cpus = { check_max(6, 'cpus')}
      memory = { check_max( 95.GB * task.attempt, 'memory' ) }
      time = { check_max( 120.h * task.attempt, 'time' ) }
    }

    withName:runSamtools_view {
      cpus = { check_max(6, 'cpus')}
      memory = { check_max( 95.GB * task.attempt, 'memory' ) }
      time = { check_max( 120.h * task.attempt, 'time' ) }
    }

    withName:runSamtools_merge {
      cpus = { check_max(6, 'cpus')}
      memory = { check_max( 95.GB * task.attempt, 'memory' ) }
      time = { check_max( 120.h * task.attempt, 'time' ) }
    }

    withName:runSamtools_merge_sort {
      cpus = { check_max(6, 'cpus')}
      memory = { check_max( 95.GB * task.attempt, 'memory' ) }
      time = { check_max( 120.h * task.attempt, 'time' ) }
    }

    withName:runSamtools_merge_index {
      cpus = { check_max(6, 'cpus')}
      memory = { check_max( 95.GB * task.attempt, 'memory' ) }
      time = { check_max( 120.h * task.attempt, 'time' ) }
    }

    withName:runBismark_extractor_merged {
      cpus = { check_max(6, 'cpus')}
      memory = { check_max( 95.GB * task.attempt, 'memory' ) }
      time = { check_max( 120.h * task.attempt, 'time' ) }
    }
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 180.GB
  max_cpus = 6
  max_time = 120.h
}
